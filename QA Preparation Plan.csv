День,Время,Блок,Задачи,Ресурсы,Практика (баг-репорты)
"День 1","10:00–11:30","Типы тестирования","Прочитать о юнит, интеграционном, функциональном, регрессионном тестировании. Записать определения и примеры: юнит (метод `calculateBalance`), интеграционное (API `/login`), функциональное (форма перевода), регрессионное (повтор формы). Написать по 1 тест-кейсу: юнит (`addFunds`), интеграционное (API `/login`), функциональное (кнопка ""Отправить""), регрессионное (форма после фикса).","https://www.softwaretestinghelp.com/types-of-software-testing/","Найти 2 бага на Guru99 Banking (например, некорректная валидация пароля). Оформить в JIRA: ID, заголовок, шаги, ожидаемый/фактический результат, окружение (Chrome 126, Windows 11), скриншот."
"День 1","11:40–13:00","SDLC","Прочитать про SDLC (Agile, Waterfall). Записать роль QA: планирование (тест-планы), разработка (тест-кейсы), тестирование (баг-репорты), деплой (регрессия). Нарисовать схему SDLC в diagrams.net. Написать 1 тест-кейс для API `/transfer`.","https://www.guru99.com/software-testing.html","-"
"День 1","13:00–14:00","Обед","-","-","-"
"День 1","14:00–15:30","JIRA","Пройти туториал по JIRA (Getting Started, Issues, JQL). Создать проект ""QA Prep"" в JIRA Cloud Free. Добавить 2 бага (например, баг баланса с Guru99), 2 задачи (""Протестировать форму логина"", ""Написать тест-кейс для API""), 3 JQL-запроса (`project = ""QA Prep"" AND type = Bug`, `status = ""To Do"" AND assignee = currentUser()`, `priority = High`).","https://www.atlassian.com/software/jira/guides","Найти 1 баг на Altoro Mutual (например, битая ссылка). Оформить в JIRA с шагами, скриншотом."
"День 1","15:40–17:00","Повторение","Повторить типы тестирования устно (юнит vs интеграционное). Создать 3 тест-кейса в JIRA (форма перевода, логин, регистрация).","-","Найти 2 бага на Altoro Mutual (например, ошибка валидации суммы перевода). Оформить в JIRA: шаги, окружение (Firefox 124, Windows 10), скриншот."
"День 1","17:00–18:00","Баг-репорты","Найти 3 бага на Guru99 Banking или Altoro Mutual (например, UI-ошибки, проблемы форм). Оформить в JIRA с шагами, окружением, скриншотами. Пример: ""Битая ссылка 'Contact Us', шаги: открыть сайт, кликнуть ссылку, результат: 404, приоритет: Низкий"".","https://app.prntscr.com/","Оформить 3 баг-репорта."
"День 2","10:00–11:30","Теория API","Пройти Postman Learning Center (Introduction, HTTP Methods). Записать шпаргалку: методы (GET, POST, PUT, DELETE), статусы (200, 201, 400, 401, 403, 404, 500, 503). Прочитать про JSON на W3Schools. Написать примеры: GET `/users`, POST `/users` `{ ""name"": ""Anna"", ""job"": ""QA"" }`, PUT `/users/1`, DELETE `/users/1`.","https://learning.postman.com/","Найти 1 баг на ReqRes (например, отсутствие ошибки в POST). Оформить в JIRA."
"День 2","11:40–13:00","Postman","Установить Postman. Создать коллекцию ""ReqRes Tests"": GET `/api/users?page=2` (проверить статус 200, поле `data`), POST `/api/users` `{ ""name"": ""Anna"", ""job"": ""QA"" }` (проверить статус 201, поля `name`, `job`). Написать автотест: `pm.test(""Status is 200"", function () { pm.response.to.have.status(200); }); pm.test(""Response has data"", function () { pm.expect(pm.response.json().data).to.exist; });`.","https://reqres.in/","Найти 1 баг (например, некорректный JSON). Оформить в JIRA с JSON-ответом."
"День 2","13:00–14:00","Обед","-","-","-"
"День 2","14:00–15:30","Тестирование REST","Создать коллекцию ""Petstore Tests"" в Postman для Swagger Petstore: GET `/pet/findByStatus?status=available` (проверить статус 200, массив питомцев), POST `/pet` `{ ""id"": 999, ""name"": ""TestDog"", ""status"": ""available"" }` (проверить статус 200, `id`, `name`), PUT `/pet` (обновить `name` на ""TestDogUpdated""), DELETE `/pet/999` (проверить статус 200). Написать автотест: `pm.test(""Pet has name"", function () { pm.expect(pm.response.json()[0].name).to.exist; });`.","https://petstore.swagger.io/","Найти 1 баг (например, неверный `id`). Оформить в JIRA с JSON-ответом."
"День 2","15:40–17:00","Практика","Выполнить 3 теста на JSONPlaceholder: GET `/posts` (проверить статус 200, поле `title`), POST `/posts` `{ ""title"": ""Test Post"", ""body"": ""This is a test"", ""userId"": 1 }` (проверить статус 201, `id`), DELETE `/posts/1` (проверить статус 200). Написать автотест: `pm.test(""Posts have title"", function () { pm.expect(pm.response.json()[0].title).to.exist; });`.","https://jsonplaceholder.typicode.com/","Найти 2 бага (например, большие `userId`). Оформить в JIRA."
"День 2","17:00–18:00","Баг-репорты","Найти 2 бага на Test Automation Practice (например, ошибка таблицы в Safari). Оформить в JIRA: шаги, окружение (Safari 17, macOS Ventura), скриншот.","https://app.prntscr.com/","Оформить 2 баг-репорта."
"День 3","10:00–11:30","Теория SOAP","Прочитать W3Schools SOAP, Software Testing Help. Записать отличия SOAP (XML, WSDL) и REST (JSON, HTTP). Разобрать WSDL Calculator: найти операции `Add`, `Subtract`, `Multiply`. Написать пример SOAP-запроса: `<soap:Envelope><soap:Body><Add><intA>5</intA><intB>3</intB></Add></soap:Body></soap:Envelope>`.","https://www.w3schools.com/xml/xml_soap.asp","Найти 1 баг в WSDL (например, отсутствие описания ошибок). Оформить в JIRA."
"День 3","11:40–13:00","SoapUI","Установить SoapUI. Создать проект с Calculator WSDL. Выполнить `Add` (intA=5, intB=3, проверить `<AddResult>8</AddResult>`). Добавить assertion (Contains: `<AddResult>`).","https://www.soapui.org/","Найти 1 баг (например, строка вместо числа). Оформить в JIRA: шаги, XML-ответ."
"День 3","13:00–14:00","Обед","-","-","-"
"День 3","14:00–15:30","Тестирование SOAP","Создать тест-сьют ""Calculator Tests"" в SoapUI: тест-кейс `Add` (intA=10, intB=20, assertion: `<AddResult>30</AddResult>`), тест-кейс `Subtract` (intA=20, intB=10, assertion: `<SubtractResult>10</SubtractResult>`).","http://www.dneonline.com/calculator.asmx?WSDL","Найти 1 баг (например, отрицательные числа). Оформить в JIRA с XML-ответом."
"День 3","15:40–17:00","Практика","Выполнить тест на Currency Converter WSDL: `ConversionRate` (USD→EUR, assertion: ответ — число, например, 0.85).","http://www.webservicex.net/CurrencyConvertor.asmx?WSDL","Найти 1 баг (например, неверная валюта). Оформить в JIRA."
"День 3","17:00–18:00","Баг-репорты","Найти 2 бага на Altoro Mutual (например, ошибка формы). Оформить в JIRA с шагами, консольными логами (Ctrl+Shift+I).","https://app.prntscr.com/","Оформить 2 баг-репорта."
"День 4","10:00–11:30","Теория CI/CD","Прочитать GitLab CI Docs, Jenkins Docs. Записать: pipeline (код→сборка→тесты→деплой), stages (Build, Test), jobs. Нарисовать схему CI/CD в diagrams.net. Написать, как QA участвует (тест-кейсы, автотесты, баги).","https://docs.gitlab.com/ee/ci/","-"
"День 4","11:40–13:00","Jenkins","Установить Jenkins или использовать Katacoda. Создать pipeline: `pipeline { agent any stages { stage('Build') { steps { sh 'echo ""Building""' } } stage('Test') { steps { sh 'echo ""Running tests""' } } } }`. Запустить, проверить лог.","https://www.jenkins.io/doc/","Найти 2 бага на uTest (например, UI-ошибка). Оформить в JIRA."
"День 4","13:00–14:00","Обед","-","-","-"
"День 4","14:00–15:30","GitLab CI","Зарегистрироваться на GitLab. Создать репозиторий, добавить `.gitlab-ci.yml`: `stages: - test test_job: stage: test script: - echo ""Running tests""`. Запустить pipeline, проверить статус.","https://gitlab.com/","Оформить 1 баг с uTest в JIRA."
"День 4","15:40–17:00","Интеграция","Настроить pipeline в Jenkins для Postman: установить Postman CLI, экспортировать коллекцию ""Petstore Tests"", создать pipeline: `pipeline { agent any stages { stage('API Test') { steps { sh 'postman collection run <collection_id>' } } } }`. Запустить, проверить отчет.","https://learning.postman.com/docs/integrations/available-integrations/postman-cli/","Найти 1 баг в pipeline (например, ошибка конфигурации). Оформить в JIRA."
"День 4","17:00–18:00","Баг-репорты","Найти 2 бага на Guru99 E-commerce (например, ошибка корзины). Оформить в JIRA с шагами, скриншотами.","https://app.prntscr.com/","Оформить 2 баг-репорта."
"День 5","10:00–11:30","Автоматизация","Пройти Katalon Academy (API Automation). Установить Katalon Studio. Создать автотест для ReqRes GET `/api/users?page=2` (New→Test Case→Web Service Request, проверить статус 200, поле `data`). Экспортировать в Java: `import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS; WS.sendRequest(findTestObject('API/GetUsers')); WS.verifyResponseStatusCode(response, 200); WS.verifyElementPropertyValue(response, 'data', 'not null')`.","https://academy.katalon.com/","Найти 1 баг (например, автотест не выявляет UI-ошибку). Оформить в JIRA."
"День 5","11:40–13:00","Jenkins","Добавить плагин Katalon в Jenkins. Настроить pipeline: `pipeline { agent any stages { stage('API Test') { steps { sh 'katalon -runMode=console -projectPath=""path/to/prj"" -testSuitePath=""Test Suites/API Tests""' } } } }`. Запустить, проверить отчет.","https://www.katalon.com/download/","-"
"День 5","13:00–14:00","Обед","-","-","-"
"День 5","14:00–15:30","GitLab CI","Добавить стадию в `.gitlab-ci.yml`: `stages: - test api_test: stage: test script: - katalon -runMode=console -projectPath=""path/to/prj"" -testSuitePath=""Test Suites/API Tests""`. Запустить pipeline, проверить лог.","https://docs.gitlab.com/ee/ci/","-"
"День 5","15:40–17:00","Анализ","Настроить отчеты: HTML Report в Jenkins, Artifacts в GitLab.","-","Найти 1 баг в pipeline (например, ошибка конфигурации). Оформить в JIRA."
"День 5","17:00–18:00","Баг-репорты","Найти 3 бага на Test Automation Practice (например, ошибка формы). Оформить в JIRA с шагами, консольными логами (Ctrl+Shift+I).","https://app.prntscr.com/","Оформить 3 баг-репорта."
"День 6","10:00–11:30","API","Выполнить 2 теста в Postman на JSONPlaceholder: GET `/posts/1` (проверить статус 200, `title`), POST `/posts` `{ ""title"": ""Test"", ""body"": ""QA"", ""userId"": 1 }` (проверить статус 201). Выполнить 1 тест в SoapUI на Currency Converter: `ConversionRate` (USD→EUR, assertion: число).","https://jsonplaceholder.typicode.com/","Найти 2 бага (например, некорректный ответ API). Оформить в JIRA."
"День 6","11:40–13:00","CI/CD","Настроить pipeline в Jenkins: `pipeline { agent any stages { stage('Postman Tests') { steps { sh 'postman collection run <collection_id>' } } stage('Katalon Tests') { steps { sh 'katalon -runMode=console -projectPath=""path/to/prj"" -testSuitePath=""Test Suites/API Tests""' } } } }`. Запустить, проверить отчет.","-","Оформить 1 баг из pipeline (например, ошибка запуска)."
"День 6","13:00–14:00","Обед","-","-","-"
"День 6","14:00–15:30","JIRA","Смоделировать цикл в JIRA: тест-кейс (API `/login`), баг (статус 200 вместо 401), ретест.","-","Найти 2 бага на Altoro Mutual. Оформить в JIRA."
"День 6","15:40–17:00","Собес","Ответить устно (записать на диктофон) на 8 вопросов: 1) Что такое API-тестирование? 2) Чем REST отличается от SOAP? 3) Как писать баг-репорт? 4) Как QA участвует в SDLC? 5) Как интегрировать автотесты в CI/CD? 6) Что такое JIRA и JQL? 7) Как тестировать API без документации? 8) Что такое регрессионное тестирование? Написать 2 тест-кейса для API (GET `/users`, POST `/users`).","https://www.softwaretestinghelp.com/","-"
"День 6","17:00–18:00","Баг-репорты","Найти 3–5 багов на uTest (тренировочный проект). Оформить в JIRA с шагами, скриншотами, логами.","https://www.utest.com/","Оформить 3–5 баг-репортов."